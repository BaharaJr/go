// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfer.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO TRANSFER (
  sender,
  receiver,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, sender, receiver, amount, created
`

type CreateTransferParams struct {
	Sender   uuid.UUID `json:"sender"`
	Receiver uuid.UUID `json:"receiver"`
	Amount   int64     `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.Sender, arg.Receiver, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.Amount,
		&i.Created,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, sender, receiver, amount, created FROM TRANSFER
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id uuid.UUID) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.Receiver,
		&i.Amount,
		&i.Created,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, sender, receiver, amount, created FROM TRANSFER
WHERE 
    sender = $1 OR
    receiver = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	Sender   uuid.UUID `json:"sender"`
	Receiver uuid.UUID `json:"receiver"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers,
		arg.Sender,
		arg.Receiver,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.Receiver,
			&i.Amount,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
