// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: entry.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO ENTRY (
  amount,
  account
) VALUES (
  $1, $2
)
RETURNING id, amount, account, created
`

type CreateEntryParams struct {
	Amount  int64     `json:"amount"`
	Account uuid.UUID `json:"account"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.Amount, arg.Account)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Account,
		&i.Created,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM ENTRY WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntries = `-- name: GetEntries :many
SELECT id, amount, account, created FROM ENTRY 
ORDER BY CREATED ASC
 LIMIT $1
 OFFSET $2
`

type GetEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetEntries(ctx context.Context, arg GetEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Account,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryId = `-- name: GetEntryId :one
SELECT id, amount, account, created FROM ENTRY WHERE ID=$1 LIMIT 1
`

func (q *Queries) GetEntryId(ctx context.Context, id uuid.UUID) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryId, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Account,
		&i.Created,
	)
	return i, err
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE ENTRY 
SET AMOUNT = $2
WHERE ID = $1
RETURNING id, amount, account, created
`

type UpdateEntryParams struct {
	ID     uuid.UUID `json:"id"`
	Amount int64     `json:"amount"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry, arg.ID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Account,
		&i.Created,
	)
	return i, err
}
